% \iffalse meta-comment ---------------------------------------------
% Copyright (C) Shanghai Jiao Tong University
% The definition in this file is referred to the Visual Identity System
% from Shanghai Jiao Tong University (SJTU). 
% See https://vi.sjtu.edu.cn for more information.
% 
% SJTUG implements the design but doesn't hold the copyright.
% Any commercial usage in this file should be acknowledged by
% the administration of SJTU.
% More information about the license,
% see https://vi.sjtu.edu.cn/index.php/articles/bulletin/16. 
% ------------------------------------------------------------------- \fi
% \iffalse
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{sjtuvi}[2022/04/21 v2.6.1 Visual Identity System library for sjtubeamer]
%</package>
% \fi
% \CheckSum{0}
% \StopEventually{}
% \iffalse
%<*package>
% ------------------------------------------------------------------- \fi
%
% \subsection{SJTU VI Library}
%   This library provides the definition of basic elements in SJTU VI, including color, logo and some shapes. 
%
%   \subsubsection{Utilities}
%
%  \begin{macro}{\DefineOption}
%   Define the beamer option on the corresponding package, key and value.
%    \begin{macrocode}
\def\DefineOption#1#2#3{
  % #1: package
  % #2: key
  % #3: value
  \DeclareOptionBeamer{#3}{\expandafter\def\csname sjtubeamer@#1@#2\endcsname{#3}}
}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\EqualOption}
%   To check if the option on package, key is equal to value.
%
%   Here, a dummy trick is used to pass the if condition.
%   Since \LaTeX\ handles \verb"\if" differently.
%   \verb"\iftrue" will eliminate the nearest \verb"\else" and \verb"\fi" but remains other extra \verb"\fi" and throws errors.
%   To avoid this, if the macro is expanded after \verb"\if", \verb"T=T", the condition holds and finish the current pair. And continues to process the real defined macro. This solution is somehow to combat against the \LaTeX\ compiler. In modern \LaTeX3, it is not so nasty to deal with neseted conditions. 
%   \verb"\iffalse" doesn't need to be considered.
%    \begin{macrocode}
\def\EqualOption{TT\fi\ifEqualOption} % dummy trick to pass the condition test
\def\ifEqualOption#1#2#3{
  % #1: package
  % #2: key
  % #3: value
  \newif\iftempif
  \edef\tempvar{\csname sjtubeamer@#1@#2\endcsname}
  \def\tempvalue{#3}
  \ifx\tempvar\tempvalue\tempiftrue\else\tempiffalse\fi
  \iftempif
}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\getcontribdir}
%  Get the contrib directory for \verb"#1" sub-theme.
%  \verb"contrib/#1" is returned.
%    \begin{macrocode}
\providecommand{\getcontribdir}[1]{contrib/#1}
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\getcontribpath}
%  Get the contrib directory filepath for \verb"#1" sub-theme and \verb"#2" filename.
%  \verb"contrib/#1/#2" is returned.
%    \begin{macrocode}
\providecommand{\getcontribpath}[2]{\getcontribdir{#1}/#2}
%    \end{macrocode}
%  \end{macro}
%
% \subsubsection{Load TikZ}
%   Load TikZ package and its related library: 
%   \verb"pattern.meta" provides the interface to define a pattern; 
%   \verb"fadings" provides the method to create a fading mask; 
%   \verb"decoration.pathmorphing" provides the interface to user-define a decoration.
%   \verb"external" provides the way for tikz externalization, which will reduce the number of repetitive rendering with the cached pdf.
%   \verb"backgrounds" provides the way to make a scope as a background to draw later.
%    \begin{macrocode}
\RequirePackage{tikz}
\usetikzlibrary{fadings}
\usetikzlibrary{decorations.pathmorphing}
\usetikzlibrary{external}
\usetikzlibrary{backgrounds}
%    \end{macrocode}
%
% \subsubsection{Color Definition}
%   The following color is defined by SJTU VI.
%   \begin{description}
%       \item[primary] The primary color, which influences the color of title and the background of title page.
%       \item[secondary] The secondary color, which influences the color of subtitle.
%       \item[tertiary] The tertiary color, which provides the color for the blocks.
%   \end{description}
%    \begin{macrocode}
\definecolor{sjtuRedPrimary}{RGB}{167,32,56}         %engred
\definecolor{sjtuRedSecondary}{RGB}{240,131,0}       %orange
\definecolor{sjtuRedTertiary}{RGB}{253,208,0}        %yellow
\definecolor{sjtuBluePrimary}{RGB}{0,64,152}         %problue 
\definecolor{sjtuBlueSecondary}{RGB}{51,141,39}      %lightgreen
\definecolor{sjtuBlueTertiary}{RGB}{0,81,78}         %lightgray
%    \end{macrocode}
%
% \subsubsection{Declare Logo}
% \begin{macro}{\definelogo}
%    Define a mask picture to make its different color variants.
%    The first argument assigns the file name and the second sets the horizontal cropping and the third sets the vertical cropping. Notice that the cropping is symmetrical (double the length). When the horizontal cropping is greater than the vertical cropping, the mask will be placed by its height, otherwise by its width. The domain for both cropping parameters is 0 to 1.
%    You should define a logo \verb"\definelogo{mylogo}{<hc>}{<vc>}" then use it in the contents like:
%    \verb"\mylogo[white]", where the optional parameter could be the override color beyond the control of main logo color system or \verb"opacity=..." to identify the opacity you want or any other parameter for a TikZ node.
%   Remember, the picture should be in the vi/ folder by default. If you want to use some other file in other folder, add an optional paramter like \verb"\definelogo[folder]{file}{0}{0}" will get the folder/file.
%   The externalization will be disabled when using this system to generate logos, locally.
%    \begin{macrocode}
\newcommand{\definelogo}[4][vi]{
  % #1: folder
  % #2: file from #1 folder
  % #3: horizontal clip (0~1)
  % #4: vertical clip (0~1)
  \pgfmathparse{notgreater(#3,#4)}
  \ifnum\pgfmathresult=1
    \begin{tikzfadingfrompicture}[name=#2]
      \fill[black] (-1,-1) rectangle (1,1);
      \node {\includegraphics[width=1.5cm]{#1/#2}};
    \end{tikzfadingfrompicture}
  \else 
    \begin{tikzfadingfrompicture}[name=#2]
      \fill[black] (-1,-1) rectangle (1,1);
      \node {\includegraphics[height=1.5cm]{#1/#2}};
    \end{tikzfadingfrompicture}
  \fi
  \expandafter\providecommand\csname #2\endcsname[1][]{
    % ##1: override color, or opacity=... (optional)
    \tikzexternaldisable
    \begin{tikzpicture}
      \begin{scope}
        \clip ({-1.0+#3},{-1.0+#4}) rectangle ({1.0-#3},{1.0-#4});
        \fill [##1, path fading=#2]
          (-1,-1) rectangle (1,1);
      \end{scope}
    \end{tikzpicture}
  }
}
%    \end{macrocode}
% \end{macro}
%
%    Define the required logo.
%    \begin{macrocode}
\definelogo{sjtubadge}{0}{0}
\definelogo{zhlogo}{0.13}{0.75}
\definelogo{enlogo}{0.13}{0.75}
\definelogo{dlogo}{0}{0}
\definelogo{vlogo}{0.8}{0.13}
\definelogo{sjtubg}{0.3}{0.5}
\definelogo{sjtugate}{0.25}{0.8}
%    \end{macrocode}
%
%
% \subsubsection{Shape Declarations}
%
% \begin{macro}{\stamptext}
%    Use one Chinese character or at most two English characters for the text argument.
%    Make a stamp unit surround the text. Similar to \verb"\highlight" command in inner theme with limitations on number of characters.
%    Use an optional argument to set the background color, default is \verb"structure" or \verb"sjtuRedPrimary".
%    \begin{macrocode}
\providecommand{\stamptext}[2][structure]{
  {
%    \end{macrocode}
%    If the color is not defined, it will fallback to color \verb"sjtuRedPrimary" in this pacakge. Notice if your color is not defined, it will not get an error through this manner.
%    \begin{macrocode}
    \providecolor{#1}{named}{sjtuRedPrimary}
%    \end{macrocode}
%    Disable caching in this group.
%    \begin{macrocode}
    \tikzset{external/export=false}
    \begin{tikzpicture}[baseline=(nodetext.base)]
      \node [white] (nodetext) at (0,0) {#2};
%    \end{macrocode}
% Use \verb"\newskip" instead of \verb"\newlength" to avoid the check of \LaTeX{} on the macro, since we have used this macro locally as intended.
%    \begin{macrocode}
      \newskip{\s}
%    \end{macrocode}
% Get the height of a tikz node \verb"nodetext" and store it in length \verb"\s". It is similar to \verb"\tcbsetmacroheightofnode" from \verb"skins" library of \verb"tcolorbox", but for decoupling reasons, use a native pgf command to calculate that without loading \verb"tcolorbox" in this style file.
%    \begin{macrocode}
      \pgfextracty{\s}{\pgfpointanchor{nodetext}{north}}%
      \pgfextracty{\pgf@ya}{\pgfpointanchor{nodetext}{south}}%
      \addtolength{\s}{-\pgf@ya}
%    \end{macrocode}
% Use a scope with \verb"on background layer" to adjust the order of rendering.
%    \begin{macrocode}
      \scoped[on background layer]
        \fill [#1]
          (-1.25*\s,0)
          -- (-0.85*\s,0.3*\s)
          -- (-0.85*\s,0.5*\s)
          -- (0.85*\s,0.5*\s)
          -- (0.85*\s,0.3*\s)
          -- (1.25*\s,0)
          -- (0.85*\s,-0.3*\s)
          -- (0.85*\s,-0.5*\s)
          -- (-0.85*\s,-0.5*\s)
          -- (-0.85*\s,-0.3*\s) -- cycle;
    \end{tikzpicture} 
  }
}
%    \end{macrocode}
%    Unlike \verb"\highlight" to make use of \verb"\colorbox" from \verb"xcolor". \verb"\stamptext" has to use Ti\emph{k}Z for drawing the vi shape. And the vi rules that the shape could not be resized to a different aspect ratio. So the only available mode is scaling.
%    The tradeof is that the text length has to be limited.
% \end{macro}
%
% \begin{macro}{\sjtubeamer@compatible}
% For \TeX Live 2018 and even older, it is \emph{not} compatible to use the patterns.meta library for making user-defined patterns. And fading is not available for caching. Please consider \verb"\def\sjtubeamer@compatible{false}" to match the following condition checking. Remember to use \verb"\makeatletter" and \verb"\makeatother" in \LaTeX{}.
% We didn't make it as an option since it will break the hierarchival structure of option definition. This is the bottom level of all style files, no advanced methods are provided in this layer.
%    \begin{macrocode}
\def\sjtubeamer@compatible@false{false}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{stamp}
%	  Declare stamp pattern to make a stamp array.
%
%	  The newest version of TikZ provides the interface to user-define a pattern. Obeying compatibility philosophy, use \verb"\pgfkeyvalueof" interface to get parameters in a standard way. The unit is first tested in a standalone file and previewed by TikZEdt.
%    \begin{macrocode}
\ifx\sjtubeamer@compatible\sjtubeamer@compatible@false
\else
  \usetikzlibrary{patterns.meta}
  \tikzdeclarepattern{
    name=stamp,
    parameters={
        \pgfkeysvalueof{/pgf/pattern keys/size},
        \pgfkeysvalueof{/pgf/pattern keys/xshift},
        \pgfkeysvalueof{/pgf/pattern keys/yshift},
      },
    defaults={
        size/.initial = 5pt,
        xshift/.initial = 0pt,
        yshift/.initial = 0pt,
      },
    bottom left={(
        -0.5*\pgfkeysvalueof{/pgf/pattern keys/size}
        +\pgfkeysvalueof{/pgf/pattern keys/xshift},
        -0.4*\pgfkeysvalueof{/pgf/pattern keys/size}
        +\pgfkeysvalueof{/pgf/pattern keys/yshift}
        )},
    top right={(
        0.5*\pgfkeysvalueof{/pgf/pattern keys/size}
        +\pgfkeysvalueof{/pgf/pattern keys/xshift},
        0.4*\pgfkeysvalueof{/pgf/pattern keys/size}
        +\pgfkeysvalueof{/pgf/pattern keys/yshift}
        )},
    tile size={(
        \pgfkeysvalueof{/pgf/pattern keys/size},
        0.8*\pgfkeysvalueof{/pgf/pattern keys/size}
        )},
    code={
        \def\s{\pgfkeysvalueof{/pgf/pattern keys/size}}%
        \tikzset{x=0.5*\s,y=0.2*\s}
        \fill[xshift=\pgfkeysvalueof{/pgf/pattern keys/xshift},
          yshift=\pgfkeysvalueof{/pgf/pattern keys/yshift}]
        (-0.25*\s,0)
        -- (-0.17*\s,0.06*\s)
        -- (-0.17*\s,0.1*\s)
        -- (0.17*\s,0.1*\s)
        -- (0.17*\s,0.06*\s)
        -- (0.25*\s,0)
        -- (0.17*\s,-0.06*\s)
        -- (0.17*\s,-0.1*\s)
        -- (-0.17*\s,-0.1*\s)
        -- (-0.17*\s,-0.06*\s) -- cycle;
      }
  }
\fi
%    \end{macrocode}
%    Avoid calling macros in code section for performance reasons.
% \end{macro}
%
% \begin{macro}{\stamparray}
% Create the stamp array in the TikZ environment.
%
% Notice \TeX{} is not good at handling parameters. Always remember to store it into a temporary variable. Register \verb"\pgfmathresult" will store the result of \verb"\pgfmathparse".
%    \begin{macrocode}
\ifx\sjtubeamer@compatible\sjtubeamer@compatible@false
  \providecommand{\stamparray}[3]{}
\else
  \providecommand{\stamparray}[3]{
    % #1: pattern size
    % #2: starting point
    % #3: ending point
    \usebeamercolor{palette primary}
    \fill [pattern={stamp[size=#1]},
      pattern color=bg!50!fg] #2 rectangle #3;
    \def\s{#1}%
    \pgfmathparse{0.5*\s}\let\xs=\pgfmathresult%
    \pgfmathparse{-0.4*\s}\let\ys=\pgfmathresult%
    \fill [pattern={stamp[size=#1,xshift=\xs, yshift=\ys]},
      pattern color=bg!50!fg] #2 rectangle #3;
  }
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{stampline}
%	  Declare a decoration to make a loop stampline.
%
%	  Notice that \verb"auto corner on length" is open to avoid spikes where the state hasn't meet \verb"final" yet.
%    \begin{macrocode}
\pgfdeclaredecoration{stampline}{initial}
{
  \state{initial}[
    width=\pgfdecorationsegmentlength,
    auto corner on length=\pgfdecorationsegmentlength]
  {
    \def\l{\pgfdecorationsegmentlength}%
    \pgfpathlineto{\pgfpoint{0.25*\l}{0pt}}
    \pgfpathlineto{\pgfpoint{0.33*\l}{0.06*\l}}
    \pgfpathlineto{\pgfpoint{0.33*\l}{0.1*\l}}
    \pgfpathlineto{\pgfpoint{0.67*\l}{0.1*\l}}
    \pgfpathlineto{\pgfpoint{0.67*\l}{0.06*\l}}
    \pgfpathlineto{\pgfpoint{0.75*\l}{0pt}}
    \pgfpathlineto{\pgfpoint{\l}{0pt}}
  }
  \state{final}
  {
    \pgfpathlineto{\pgfpointdecoratedpathlast}
  }
}
%    \end{macrocode}
% \end{macro}
%
%
% \iffalse
%</package>
% \fi
%
% \Finale
\endinput
